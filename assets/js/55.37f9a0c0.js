(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{386:function(e,t,a){"use strict";a.r(t);var s=a(15),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"pipeline-setup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pipeline-setup"}},[e._v("#")]),e._v(" Pipeline Setup")]),e._v(" "),t("p",[e._v("This section provides detailed instructions for setting up the cosigt pipeline on your system.")]),e._v(" "),t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("p",[e._v("Cosigt is built on version 7 of the popular "),t("a",{attrs:{href:"https://snakemake.github.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("Snakemake"),t("OutboundLink")],1),e._v(" workflow management system. Detailed instructions for installing Snakemake are available in the "),t("a",{attrs:{href:"https://snakemake.readthedocs.io/en/stable/getting_started/installation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("official documentation"),t("OutboundLink")],1),e._v(". Below is a minimal installation script using "),t("a",{attrs:{href:"https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("micromamba"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("We have tested the cosigt pipeline with Snakemake version 7.32.4. At the time of writing, Snakemake has migrated to versions 8/9, introducing changes that we have not yet evaluated - therefore, versions >=8 are not currently supported.")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install micromamba")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("SHELL")]),e._v("}")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-L")]),e._v(" micro.mamba.pm/install.sh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create environment with Snakemake, Apptainer, and other dependencies")]),e._v("\nmicromamba create "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" smk7324app132 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    bioconda::snakemake"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7.32")]),e._v(".4 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    conda-forge::apptainer"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.3")]),e._v(".2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    conda-forge::cookiecutter"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.6")]),e._v(".0 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    conda-forge::gdown "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#only used to download the test dataset")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Activate the environment")]),e._v("\nmicromamba activate smk7324app132\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Confirm successful installation")]),e._v("\nsnakemake "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 7.32.4")]),e._v("\nsingularity "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# apptainer version 1.3.2")]),e._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("The code above should automatically install "),t("code",[e._v("PyYAML")]),e._v(" in the environment. If this package is missing, you can install it with "),t("code",[e._v("pip install PyYAML")])])]),e._v(" "),t("p",[e._v("Cosigt combines numerous tools across different workflow branches, which can present setup challenges for some users. To simplify deployment and enhance reproducibility, we provide "),t("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),t("OutboundLink")],1),e._v(" containers with pre-compiled binaries for all required software. These containers are automatically managed by the pipeline when a working "),t("a",{attrs:{href:"https://apptainer.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apptainer"),t("OutboundLink")],1),e._v(" (formerly Singularity) installation is available. Alternatively, the pipeline can be run using dedicated "),t("a",{attrs:{href:"https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conda"),t("OutboundLink")],1),e._v(" environments, which are provided for each rule in the workflow. For users who prefer not to use Singularity or Conda, all "),t("a",{attrs:{href:"#tools"}},[e._v("required tools")]),e._v(" must be manually installed and made available in the system "),t("code",[e._v("$PATH")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),t("p",[e._v("Once the "),t("a",{attrs:{href:"#prerequisites"}},[e._v("prerequisites")]),e._v(" are in place, clone the cosigt pipeline repository:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/davidebolo1993/cosigt\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" cosigt/cosigt_smk\n")])])]),t("h3",{attrs:{id:"job-submission-on-hpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#job-submission-on-hpc"}},[e._v("#")]),e._v(" Job Submission on HPC")]),e._v(" "),t("p",[e._v("For users working with high-performance computing (HPC) clusters, we recommend creating a "),t("a",{attrs:{href:"https://snakemake.readthedocs.io/en/stable/executing/cli.html#profiles",target:"_blank",rel:"noopener noreferrer"}},[e._v("profile"),t("OutboundLink")],1),e._v(" to manage job submission. For example, a cookiecutter profile for the SLURM workload manager is available "),t("a",{attrs:{href:"https://github.com/Snakemake-Profiles/slurm",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(" and can be configured as follows:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("template")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gh:Snakemake-Profiles/slurm"')]),e._v("\ncookiecutter "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --output-dir config "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$template")]),e._v("\n")])])]),t("p",[e._v("A sample configuration is shown below. Note that you may need to adjust these settings based on your specific cluster configuration:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("[1/17] profile_name (slurm):\n[2/17] Select use_singularity\n    1 - False\n    2 - True\n    Choose from [1/2] (1): 2\n[3/17] Select use_conda\n    1 - False\n    2 - True\n    Choose from [1/2] (1): 1\n[4/17] jobs (500):\n[5/17] restart_times (0): 3\n[6/17] max_status_checks_per_second (10):\n[7/17] max_jobs_per_second (10):\n[8/17] latency_wait (5): 30\n[9/17] Select print_shell_commands\n    1 - False\n    2 - True\n    Choose from [1/2] (1): 2\n[10/17] sbatch_defaults (): partition=cpuq #other options like account, qos, etc. can be added here\n[11/17] cluster_sidecar_help (Use cluster sidecar. NB! Requires snakemake >= 7.0! Enter to continue...):\n[12/17] Select cluster_sidecar\n    1 - yes\n    2 - no\n    Choose from [1/2] (1): 1\n[13/17] cluster_name ():\n[14/17] cluster_jobname (%r_%w):\n[15/17] cluster_logpath (logs/slurm/%r/%j):\n[16/17] cluster_config_help (The use of cluster-config is discouraged. Rather, set snakemake CLI options in the profile configuration file (see snakemake documentation on best practices). Enter to continue...):\n[17/17] cluster_config ():\n")])])]),t("p",[e._v("This process will generate the following directory structure:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("config/slurm\n├── CookieCutter.py\n├── config.yaml\n├── settings.json\n├── slurm-jobscript.sh\n├── slurm-sidecar.py\n├── slurm-status.py\n├── slurm-submit.py\n└── slurm_utils.py\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("The configuration above enables running the cosigt pipeline using Docker containers through Singularity. If you prefer a Conda-based solution, change your answers in steps 2/17 and 3/17 accordingly, or modify the resulting "),t("code",[e._v("config/slurm/config.yaml")]),e._v(" file with "),t("code",[e._v('use-singularity: "False"')]),e._v(" and "),t("code",[e._v('use-conda: "True"')]),e._v(".")])]),e._v(" "),t("p",[e._v("Profiles for other cluster management systems can be found online (such as "),t("a",{attrs:{href:"https://github.com/Christian-Heyer/snakemake-lsf",target:"_blank",rel:"noopener noreferrer"}},[e._v("this one"),t("OutboundLink")],1),e._v(" for LSF), though we have not tested them with this workflow.")]),e._v(" "),t("h3",{attrs:{id:"organization-of-pipeline-input"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#organization-of-pipeline-input"}},[e._v("#")]),e._v(" Organization of Pipeline Input")]),e._v(" "),t("p",[e._v("We provide a "),t("a",{attrs:{href:"https://github.com/davidebolo1993/cosigt/blob/master/cosigt_smk/workflow/scripts/organize.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python script"),t("OutboundLink")],1),e._v(" to automate the organization of folders and files used by the pipeline (see the "),t("RouterLink",{attrs:{to:"/workflow/workflow.html"}},[e._v("→ Workflow")]),e._v(" section for a detailed description and "),t("RouterLink",{attrs:{to:"/usecases/usecases.html"}},[e._v("→ Use Cases")]),e._v(" for examples). It is "),t("strong",[e._v("strongly recommended")]),e._v(" to use this script during setup, as our workflow strictly depends on the specific file structure it generates. Deviations from this structure may cause the pipeline to malfunction.")],1),e._v(" "),t("h3",{attrs:{id:"running-cosigt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#running-cosigt"}},[e._v("#")]),e._v(" Running Cosigt")]),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"#organization-of-pipeline-input"}},[e._v("Python script")]),e._v(" generates a ready-to-use Bash script ("),t("code",[e._v("cosigt_smk.sh")]),e._v(") to run the cosigt pipeline through Singularity (or Conda). To run cosigt without using Singularity or Conda, ensure all necessary "),t("a",{attrs:{href:"#tools"}},[e._v("tools")]),e._v(" are available in your "),t("code",[e._v("$PATH")]),e._v(" and execute "),t("code",[e._v("snakemake cosigt -j <cores>")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[e._v("#")]),e._v(" Tools")]),e._v(" "),t("p",[e._v("Below is a list of tools and their versions used across all branches of the pipeline (in alphabetical order). These versions correspond to the latest release of the pipeline. For guidance on manual installation of most tools, refer to the Dockerfiles in "),t("a",{attrs:{href:"https://github.com/davidebolo1993/cosigt_containers/tree/main",target:"_blank",rel:"noopener noreferrer"}},[e._v("this repository"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Tool")]),e._v(" "),t("th",[e._v("Version/Commit")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/arq5x/bedtools2",target:"_blank",rel:"noopener noreferrer"}},[e._v("bedtools"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v2.31.0")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/davidebolo1993/cosigt",target:"_blank",rel:"noopener noreferrer"}},[e._v("cosigt"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/pangenome/gafpack",target:"_blank",rel:"noopener noreferrer"}},[e._v("gafpack"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/AndreaGuarracino/gfainject",target:"_blank",rel:"noopener noreferrer"}},[e._v("gfainject"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/pangenome/impg",target:"_blank",rel:"noopener noreferrer"}},[e._v("impg"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/lh3/minimap2",target:"_blank",rel:"noopener noreferrer"}},[e._v("minimap2"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v2.28")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/pangenome/odgi",target:"_blank",rel:"noopener noreferrer"}},[e._v("odgi"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/pangenome/pggb",target:"_blank",rel:"noopener noreferrer"}},[e._v("pggb"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("vx.x.x")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/samtools/samtools",target:"_blank",rel:"noopener noreferrer"}},[e._v("samtools"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v1.22")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/tobiasrausch/wally",target:"_blank",rel:"noopener noreferrer"}},[e._v("wally"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v0.7.1")])])])]),e._v(" "),t("p",[e._v("The reads-to-assemblies alignment step uses branch-specific tools:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Tool")]),e._v(" "),t("th",[e._v("Version/Commit")]),e._v(" "),t("th",[e._v("Usage")]),e._v(" "),t("th",[e._v("Branch")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/lh3/bwa",target:"_blank",rel:"noopener noreferrer"}},[e._v("bwa"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v0.7.18")]),e._v(" "),t("td",[e._v("short-reads, ancient genomes")]),e._v(" "),t("td",[e._v("ancient_dna")])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://github.com/bwa-mem2/bwa-mem2",target:"_blank",rel:"noopener noreferrer"}},[e._v("bwa-mem2"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("v2.2.1")]),e._v(" "),t("td",[e._v("short-reads, modern genomes")]),e._v(" "),t("td",[e._v("master, custom_alleles")])])])]),e._v(" "),t("p",[e._v("Various calculations and visualizations are performed in R using multiple libraries. A complete list of required R packages can be found "),t("a",{attrs:{href:"https://github.com/davidebolo1993/cosigt_containers/blob/877bd1ecac86de8c1f079d08884c434c823786c7/renv/4.3.3/Dockerfile#L21-L50",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"installation-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation-test"}},[e._v("#")]),e._v(" Installation Test")]),e._v(" "),t("p",[e._v("We provide a small test dataset to verify your installation, available for download "),t("a",{attrs:{href:"https://drive.google.com/file/d/1RClqLk7pObNXmTNns3cyHtCwC_i3tnLP/view?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(". This dataset includes:")]),e._v(" "),t("ol",[t("li",[e._v("A small reference sequence ("),t("code",[e._v("genome/genome.fa")]),e._v("): a 2 Mbp fragment extracted from chromosome 22 of the human GRCh38 reference genome")]),e._v(" "),t("li",[e._v("Five (simulated) assembled contigs ("),t("code",[e._v("assemblies/assemblies.fa")]),e._v("): each containing a single deletion relative to the reference, ranging from 10 to 50 Kbp")]),e._v(" "),t("li",[e._v("Synthetic reads ("),t("code",[e._v("sample/sample.bam")]),e._v("): 50% derived from the reference sequence and 50% from the assembly with a 30 Kbp deletion")]),e._v(" "),t("li",[e._v("A BED file ("),t("code",[e._v("region/region.bed")]),e._v(") defining the region of interest")])]),e._v(" "),t("p",[e._v("To run the test:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Working directory: cosigt/cosigt_smk")]),e._v("\nmicromamba activate smk7324app132\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Download test data using gdown")]),e._v("\ngdown "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://drive.google.com/file/d/1RClqLk7pObNXmTNns3cyHtCwC_i3tnLP/view?usp=sharing"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-O")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack.tar.gz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-xvf")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack.tar.gz "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-C")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create minimal input mapping")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("asm")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-name")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"assemblies.fa"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-exec")]),e._v(" readlink "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"chr22'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[e._v("\\t")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$asm")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" asm_map.tsv\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run organize.py to prepare directory structure")]),e._v("\npython workflow/scripts/organize.py "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),e._v(" asm_map.tsv "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack/genome/genome.fa "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-r")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack/sample "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/cosigt.test.pack/region/region.bed "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" cosigt_test "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--threads")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run cosigt pipeline")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" cosigt_smk.sh\n")])])]),t("p",[e._v("After the initial pull of Singularity containers (a one-time operation if using the same base folder - containers will be stored in "),t("code",[e._v("cosigt/cosigt_smk/.snakemake/singularity")]),e._v("), the entire test should take approximately 1 minute to complete. The genotype results will be available in "),t("code",[e._v("cosigt_test/cosigt/sample/chr22/chr22_1000000_1060000/cosigt_genotype.tsv")]),e._v(", showing the genotype of "),t("code",[e._v("sample")]),e._v(" in region "),t("code",[e._v("chr22:1000000-1060000")]),e._v(". The expected genotype reported by cosigt should be:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("haplotype.1                haplotype.2\ndel#3#30k:1000001-1029999  ref#chr22:1000001-1060000\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);